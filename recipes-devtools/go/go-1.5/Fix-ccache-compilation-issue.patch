From a06615119cbdc4745a7529452c4837061e075604 Mon Sep 17 00:00:00 2001
From: Bogdan Purcareata <bogdan.purcareata@freescale.com>
Date: Wed, 7 Oct 2015 17:54:09 +0300
Subject: [PATCH] Fix ccache compilation issue

In order for ccache to work with golang 1.4, Amy's changes to
1.3 have been ported over. The commit message from the original modification
follows:

  golang doesn't work with ccache. In the current state, a lot of parsing
  happens where it'll grab the first string in CC or LD and uses that for
  its builds. When ccache is enabled, it results in trying to do builds
  with just ccache.

  The brokeness is seen when building with apps that uses cgo, like docker.
  To enable ccache to work, some string comparisons and changes to parsing
  had to be made.

  Signed-off-by: Amy Fong <amy.fong@windriver.com>

Signed-off-by: Christopher Braga <chris.braga@windriver.com>
[ported to Go 1.5; skipped patching non-existent src/cmd/ld/lib.c]
Signed-off-by: Bogdan Purcareata <bogdan.purcareata@freescale.com>
---
 src/cmd/cgo/gcc.go     |  6 ++++++
 src/cmd/go/build.go    | 11 +++++++++--
 src/os/exec/lp_unix.go | 12 +++++++++---
 3 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/src/cmd/cgo/gcc.go b/src/cmd/cgo/gcc.go
index b64849a..a3cfe58 100644
--- a/src/cmd/cgo/gcc.go
+++ b/src/cmd/cgo/gcc.go
@@ -725,6 +725,12 @@ func (p *Package) rewriteRef(f *File) {
 func (p *Package) gccBaseCmd() []string {
 	// Use $CC if set, since that's what the build uses.
 	if ret := strings.Fields(os.Getenv("CC")); len(ret) > 0 {
+		if strings.Contains(ret[0], "ccache") {
+			base_cc := ret[0] + " " + ret[1]
+			os.Setenv("CCACHE_CC", ret[1])
+			ret[1] = base_cc
+			return ret[1:]
+        	}
 		return ret
 	}
 	// Try $GCC if set, since that's what we used to use.
diff --git a/src/cmd/go/build.go b/src/cmd/go/build.go
index b7c7e05..5c1c858 100644
--- a/src/cmd/go/build.go
+++ b/src/cmd/go/build.go
@@ -2780,8 +2780,15 @@ func (b *builder) ccompilerCmd(envvar, defcmd, objdir string) []string {
 	// strings returned are "gcc", "-I", objdir (and cuts them off).
 
 	compiler := envList(envvar, defcmd)
-	a := []string{compiler[0], "-I", objdir}
-	a = append(a, compiler[1:]...)
+
+	a := []string{compiler[0]}
+	if strings.Contains(compiler[0], "ccache") {
+		a = append(a, compiler[1], "-I", objdir)
+		a = append(a, compiler[2:]...)
+	} else {
+		a = append(a, "-I", objdir)
+		a = append(a, compiler[1:]...)
+	}
 
 	// Definitely want -fPIC but on Windows gcc complains
 	// "-fPIC ignored for target (all code is position independent)"
diff --git a/src/os/exec/lp_unix.go b/src/os/exec/lp_unix.go
index 3f895d5..08ae202 100644
--- a/src/os/exec/lp_unix.go
+++ b/src/os/exec/lp_unix.go
@@ -35,8 +35,14 @@ func LookPath(file string) (string, error) {
 	// (only bypass the path if file begins with / or ./ or ../)
 	// but that would not match all the Unix shells.
 
-	if strings.Contains(file, "/") {
-		err := findExecutable(file)
+	tmp := file
+	if strings.Contains(file, " ") {
+		exec_part := strings.Split(file, " ")[0]
+		tmp = exec_part
+	}
+
+	if strings.Contains(tmp, "/") {
+		err := findExecutable(tmp)
 		if err == nil {
 			return file, nil
 		}
@@ -51,7 +57,7 @@ func LookPath(file string) (string, error) {
 			// Unix shell semantics: path element "" means "."
 			dir = "."
 		}
-		path := dir + "/" + file
+		path := dir + "/" + tmp
 		if err := findExecutable(path); err == nil {
 			return path, nil
 		}
-- 
1.9.1

